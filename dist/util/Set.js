// Generated by CoffeeScript 1.9.2
(function() {
  var Set, _;

  _ = require('lodash');


  /*
  Simple immutable set implementation.
   */

  Set = (function() {
    function Set() {}

    Set.withHashFunction = function(hashFunction, initial) {
      var set;
      if (initial == null) {
        initial = [];
      }
      set = _.assign(new Set(), {
        _hash: hashFunction,
        _elements: Object.freeze({})
      });
      return initial.reduce(Set.put, set);
    };

    Set.withHashProperty = function(hashProperty, initial) {
      var set;
      if (initial == null) {
        initial = [];
      }
      set = _.assign(new Set(), {
        _hash: function(obj) {
          return obj[hashProperty];
        },
        _elements: Object.freeze({})
      });
      return initial.reduce(Set.put, set);
    };

    Set.get = function(set, hash) {
      return set._elements[hash];
    };

    Set.contains = function(set, element) {
      console.log('contains', set, element);
      return set._elements[set._hash(element)] != null;
    };

    Set.count = function(set) {
      return (Object.keys(set._elements)).length;
    };

    Set.find = function(set, predicate) {
      return _.find(Set.asArray(set), predicate);
    };

    Set.asArray = function(set) {
      return _.values(set._elements);
    };

    Set.asObject = function(set) {
      return set._elements;
    };

    Set.put = function(set, element) {
      var delta;
      delta = {};
      delta[set._hash(element)] = element;
      return _.assign({}, set, {
        _elements: _.assign({}, set._elements, delta)
      });
    };

    Set.remove = function(set, element) {
      return Set.removeByHash(set, set._hash(element));
    };

    Set.removeByHash = function(set, hash) {
      return _.assign({}, set, {
        _elements: _.omit(set._elements, hash)
      });
    };

    return Set;

  })();

  module.exports = Set;

}).call(this);

//# sourceMappingURL=Set.js.map
