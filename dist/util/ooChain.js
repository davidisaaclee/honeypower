// Generated by CoffeeScript 1.9.2

/*
Utility for writing mutation chains with object-oriented functions.

     * f: (T, a, b) -> T
     * g: (T, c) -> T
     * t: T

    result1 = t
    result1 = f t, a, b
    result1 = g t, c

    result2 = ooChain t
      .then f, a, b
      .then g, c
      .value()

    result1 == result2

     * pending spec
    result3 = ooChain t
      .let 'foo': a
      .let 'bar': b
      .in (lets) -> [f, lets.foo, lets.bar]
       * tapping into stream for a `let` declaration
      .let (v) -> 'qux': v.c
      .in (lets) -> [g, lets.qux]
      .value()
 */

(function() {
  var ooChain,
    slice = [].slice;

  module.exports = ooChain = function(object) {
    return {
      then: function() {
        var args, fn;
        fn = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return ooChain(fn.apply(null, [object].concat(slice.call(args))));
      },
      value: function() {
        return object;
      }
    };
  };

}).call(this);

//# sourceMappingURL=ooChain.js.map
