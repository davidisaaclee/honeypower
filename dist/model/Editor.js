// Generated by CoffeeScript 1.9.2
(function() {
  var Editor, Kit, Model, Prototype, Scene, Set, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Model = require('./Model');

  Scene = require('./Scene');

  Kit = require('./Kit');

  Prototype = require('./Prototype');

  Set = require('../util/Set');


  /*
  Represents the application view for creating and editing Scenes.
  
  Editor ::=
     * The Scene being modified.
    scene: Scene
  
     * All active Kits.
    kits: { id -> Kit }
   */

  Editor = (function(superClass) {
    extend(Editor, superClass);

    function Editor() {
      return Editor.__super__.constructor.apply(this, arguments);
    }

    Editor.make = function(scene, kits) {
      var kitSet;
      if (scene == null) {
        scene = Scene.empty;
      }
      if (kits == null) {
        kits = [];
      }
      kitSet = kits.reduce(Set.put, Set.withHashProperty('name'));
      return _.assign(new Editor(), {
        scene: scene,
        kits: kitSet
      });
    };

    Editor.empty = Object.freeze(Editor.make());

    Editor.withKits = function(kits) {
      if (kits == null) {
        kits = [];
      }
      return Editor.make(Scene.empty, kits);
    };

    Editor.getPrototype = function(editor, protoKey) {
      var results;
      results = Set.asArray(editor.kits).map(function(kit) {
        return Kit.getPrototype(kit, protoKey);
      }).filter(function(x) {
        return x != null;
      });
      switch (results.length) {
        case 0:
          return void 0;
        case 1:
          return results[0];
        default:
          console.warn('More than one prototype with key', protoKey);
          return results[0];
      }
    };

    Editor.stampPrototype = function(editor, protoKey, name) {
      var proto;
      proto = Editor.getPrototype(editor, protoKey);
      return Prototype.stamp(proto, name);
    };

    Editor.addPrototype = function(editor, protoKey, entity) {
      entity.protoKey = protoKey;
      return _.assign({}, editor, {
        prototypes: Set.put(editor.prototypes, entity)
      });
    };

    return Editor;

  })(Model);

  module.exports = Editor;

}).call(this);

//# sourceMappingURL=Editor.js.map
