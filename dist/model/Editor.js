// Generated by CoffeeScript 1.9.2
(function() {
  var Editor, EditorFns, Kit, Lens, Model, Prototype, Scene, Set, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Lens = require('lens');

  Model = require('./Model');

  Scene = require('./Scene');

  Kit = require('./Kit');

  Prototype = require('./Prototype');

  Set = require('../util/Set');


  /*
  Represents the application view for creating and editing Scenes.
  
  Editor ::=
     * The Scene being modified.
    scene: Scene
  
     * All active Kits.
    kits: { id -> Kit }
   */

  Editor = (function(superClass) {
    extend(Editor, superClass);

    function Editor() {
      return Editor.__super__.constructor.apply(this, arguments);
    }

    return Editor;

  })(Model);

  EditorFns = {
    make: function(scene, kits) {
      var kitSet;
      if (scene == null) {
        scene = Scene.empty;
      }
      if (kits == null) {
        kits = [];
      }
      kitSet = kits.reduce(Set.put, Set.withHashProperty('name'));
      return _.assign(new Editor(), {
        scene: scene,
        kits: kitSet
      });
    },
    withKits: function(kits) {
      if (kits == null) {
        kits = [];
      }
      return EditorFns.make(Scene.empty, kits);
    },

    /* Lenses */
    scene: Lens.fromPath('scene'),
    proto: (function() {
      var getter;
      getter = function(model, key) {
        var results;
        results = Set.asArray(model.kits).map(function(kit) {
          return Kit.proto.get(kit, key);
        }).filter(function(x) {
          return x != null;
        });
        switch (results.length) {
          case 0:
            return void 0;
          case 1:
            return results[0];
          default:
            console.warn('More than one prototype with key', key);
            return results[0];
        }
      };
      return new Lens(getter, null);
    })(),

    /* Mutation */
    stampPrototype: function(editor, protoKey, transform, name, id) {
      var proto;
      proto = EditorFns.proto.get(editor, protoKey);
      return Prototype.stamp(proto, transform, name, id);
    }
  };

  _.assign(EditorFns, {
    empty: Object.freeze(EditorFns.make())
  });

  module.exports = EditorFns;

}).call(this);

//# sourceMappingURL=Editor.js.map
