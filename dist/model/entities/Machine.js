// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, Machine, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Entity = require('./Entity');


  /*
  Represents an `Entity` which can be applied to other `Entity`s.
  
  Machine ::=
    name: String
    transform: Transform
    children: [Entity]
     * TODO: Machines, states? Hm?
    spriteIds: { state -> String }
    state: String
   */

  Machine = (function(superClass) {
    extend(Machine, superClass);

    function Machine() {
      return Machine.__super__.constructor.apply(this, arguments);
    }

    Machine.make = null;

    return Machine;

  })(Entity);

}).call(this);

//# sourceMappingURL=Machine.js.map
