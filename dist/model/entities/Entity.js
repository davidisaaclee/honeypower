// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, Model, Set, Transform, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Set = require('../../util/Set');

  Model = require('../Model');

  Transform = require('../graphics/Transform');


  /*
  Entities are hierarchical graphical objects.
  
  Entity ::=
    id: String
    name: String | null
    transform: Transform
    child: Entity
   */

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity() {
      return Entity.__super__.constructor.apply(this, arguments);
    }

    Entity.make = (function() {
      var _nextId, _spawnCount;
      _spawnCount = 0;
      _nextId = function() {
        return "entity-" + (_spawnCount++);
      };
      return function(name, transform, child, proto) {
        if (name == null) {
          name = null;
        }
        if (transform == null) {
          transform = Transform["default"];
        }
        if (child == null) {
          child = null;
        }
        return _.assign(new Entity(), {
          id: _nextId(),
          name: name,
          transform: transform,
          child: child
        });
      };
    })();

    Entity.getId = function(entity) {
      return entity.id;
    };

    Entity.getName = function(entity) {
      return entity.name;
    };

    Entity.getChild = function(entity) {
      return entity.child;
    };

    Entity.getPosition = function(entity) {
      return Transform.getPosition(entity.transform);
    };

    Entity.getRotation = function(entity) {
      return Transform.getRotation(entity.transform);
    };

    Entity.getScale = function(entity) {
      return Transform.getScale(entity.transform);
    };

    Entity.getAllAttachedTimelines = function(entity) {
      return Set.asArray(entity.attachedTimelines);
    };

    Entity.setChild = function(entity, child) {
      return _.assign({}, entity, {
        child: child
      });
    };

    Entity.removeChild = function(entity) {
      return _.assign({}, entity, {
        child: null
      });
    };

    Entity.addTimeline = function(entity, timelineId, progress) {
      var newAttachedTimelines;
      if (progress == null) {
        progress = 0;
      }
      newAttachedTimelines = Set.put(entity.attachedTimelines, {
        timeline: timelineId,
        progress: progress
      });
      return _.assign({}, entity, {
        attachedTimelines: newAttachedTimelines
      });
    };

    Entity.removeTimeline = function(entity, timelineId) {
      return _.assign({}, entity, {
        attachedTimelines: Set.removeByHash(entity.attachedTimelines, timelineId)
      });
    };

    Entity.transform = function(entity, arg) {
      var rotate, scale, translate;
      translate = arg.translate, rotate = arg.rotate, scale = arg.scale;
      if (translate != null) {
        Entity.translate(entity, translate);
      }
      if (rotate != null) {
        Entity.rotate(entity, rotate);
      }
      if (scale != null) {
        return Entity.scale(entity, scale);
      }
    };

    Entity.translate = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.translate(entity.transform, amount)
      });
    };

    Entity.rotate = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.rotate(entity.transform, amount)
      });
    };

    Entity.scale = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.scale(entity.transform, amount)
      });
    };

    return Entity;

  })(Model);

  module.exports = Entity;

}).call(this);

//# sourceMappingURL=Entity.js.map
