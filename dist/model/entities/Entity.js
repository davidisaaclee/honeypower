// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, EntityFunctions, Immutable, Lens, Model, Set, Transform, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Immutable = require('immutable');

  Lens = require('lens');

  Set = require('../../util/Set');

  Model = require('../Model');

  Transform = require('../graphics/Transform');


  /*
  Entities are hierarchical graphical objects.
  
  Entity ::=
    id: String
    name: String | null
    transform: Transform
    child: Entity
   */

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity() {
      return Entity.__super__.constructor.apply(this, arguments);
    }

    return Entity;

  })(Model);

  EntityFunctions = {
    make: (function() {
      var _nextId, _spawnCount;
      _spawnCount = 0;
      _nextId = function() {
        return "entity-" + (_spawnCount++);
      };
      return function(name, transform, child, id) {
        var config, fields, initialData;
        config = {
          name: name,
          child: child,
          id: id
        };
        initialData = _.defaults({}, {
          transform: transform
        }, {
          transform: Transform["default"]
        });
        fields = _.defaults(config, {
          id: _nextId(),
          child: null,
          name: null,
          timelines: Immutable.List(),
          timelinesData: Immutable.Map(),
          localData: initialData,
          computedData: initialData
        });
        return _.assign(new Entity(), fields);
      };
    })(),

    /* Lenses */
    id: Lens.fromPath('id'),
    name: Lens.fromPath('name'),
    child: Lens.fromPath('child'),
    localData: Lens.fromPath('localData'),
    computedData: Lens.fromPath('computedData'),
    timelineStack: new Lens(function(entity) {
      return entity.timelines.toArray();
    }, null),
    timelineData: new Lens(function(entity, timelineId) {
      return entity.timelinesData.get(timelineId);
    }, function(entity, timelineId, val) {
      return _.assign({}, entity, {
        timelinesData: entity.timelinesData.set(timelineId, val)
      });
    }),
    progressForTimeline: new Lens(function(entity, timelineId) {
      return (entity.timelinesData.get(timelineId)).progress;
    }, function(entity, timelineId, progress) {
      return EntityFunctions.timelineData.over(entity, timelineId, function(timelineData) {
        return _.assign({}, timelineData, {
          progress: progress
        });
      });
    }),
    isAttachedToTimeline: function(entity, timelineId) {
      return entity.timelinesData.has(timelineId);
    },
    removeChild: function(entity) {
      return EntityFunctions.child.set(entity, null);
    },
    insertTimeline: function(entity, timelineId, progress, stackPosition) {
      if (progress == null) {
        progress = 0;
      }
      if (stackPosition == null) {
        stackPosition = 0;
      }
      return _.assign({}, entity, {
        timelines: entity.timelines.splice(stackPosition, 0, timelineId),
        timelinesData: entity.timelinesData.set(timelineId, {
          progress: progress
        })
      });
    },
    removeTimeline: function(entity, timelineIdx) {
      var timelineId;
      timelineId = entity.timelines.get(timelineIdx);
      if (timelineId != null) {
        return _.assign({}, entity, {
          timelines: entity.timelines["delete"](timelineIdx),
          timelinesData: entity.timelinesData["delete"](timelineId)
        });
      } else {
        return entity;
      }
    },
    translateBy: function(entity, amount) {
      return EntityFunctions.transform.over(entity, function(transform) {
        return Transform.translateBy(transform, amount);
      });
    },
    rotateBy: function(entity, amount) {
      return EntityFunctions.transform.over(entity, function(transform) {
        return Transform.rotateBy(transform, amount);
      });
    },
    scaleBy: function(entity, amount) {
      EntityFunctions.transform.over(entity, function(transform) {
        return Transform.scaleBy(transform, amount);
      });
      return _.assign({}, entity, {
        transform: Transform.scaleBy(EntityFunctions.transform.get(entity), amount)
      });
    }
  };

  _.assign(EntityFunctions, {
    transform: Lens.compose(EntityFunctions.computedData, Lens.fromPath('transform'))
  });

  _.assign(EntityFunctions, {
    position: Lens.compose(EntityFunctions.transform, Transform.position),
    rotation: Lens.compose(EntityFunctions.transform, Transform.rotation),
    scale: Lens.compose(EntityFunctions.transform, Transform.scale)
  });

  module.exports = EntityFunctions;

}).call(this);

//# sourceMappingURL=Entity.js.map
