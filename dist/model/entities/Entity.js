// Generated by CoffeeScript 1.9.2
(function() {
  var Entity, Immutable, Model, Set, Transform, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Immutable = require('immutable');

  Set = require('../../util/Set');

  Model = require('../Model');

  Transform = require('../graphics/Transform');


  /*
  Entities are hierarchical graphical objects.
  
  Entity ::=
    id: String
    name: String | null
    transform: Transform
    child: Entity
   */

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity() {
      return Entity.__super__.constructor.apply(this, arguments);
    }

    Entity.make = (function() {
      var _nextId, _spawnCount;
      _spawnCount = 0;
      _nextId = function() {
        return "entity-" + (_spawnCount++);
      };
      return function(name, transform, child, id) {
        var config, fields, initialData, r;
        config = {
          name: name,
          child: child,
          id: id
        };
        initialData = _.defaults({}, {
          transform: transform
        }, {
          transform: Transform["default"]
        });
        fields = _.defaults(config, {
          id: _nextId(),
          child: null,
          name: null,
          timelines: Immutable.List(),
          timelinesData: Immutable.Map(),
          localData: initialData,
          computedData: initialData
        });
        r = _.assign(new Entity(), fields);
        return r;
      };
    })();

    Entity.getId = function(entity) {
      return entity.id;
    };

    Entity.getName = function(entity) {
      return entity.name;
    };

    Entity.getChild = function(entity) {
      return entity.child;
    };

    Entity.getLocalData = function(entity) {
      return entity.localData;
    };

    Entity.getComputedData = function(entity) {
      return entity.computedData;
    };

    Entity.getTransform = function(entity) {
      return (Entity.getComputedData(entity)).transform;
    };

    Entity.getPosition = function(entity) {
      return Transform.getPosition(Entity.getTransform(entity));
    };

    Entity.getRotation = function(entity) {
      return Transform.getRotation(Entity.getTransform(entity));
    };

    Entity.getScale = function(entity) {
      return Transform.getScale(Entity.getTransform(entity));
    };

    Entity.getTimelineStack = function(entity) {
      return entity.timelines.toArray();
    };

    Entity.getProgressForTimeline = function(entity, timelineId) {
      return entity.timelinesData.get(timelineId);
    };

    Entity.setChild = function(entity, child) {
      return _.assign({}, entity, {
        child: child
      });
    };

    Entity.removeChild = function(entity) {
      return _.assign({}, entity, {
        child: null
      });
    };

    Entity.setLocalData = function(entity, localData) {
      return _.assign({}, entity, {
        localData: localData
      });
    };

    Entity.setComputedData = function(entity, computedData) {
      return _.assign({}, entity, {
        computedData: computedData
      });
    };

    Entity.insertTimeline = function(entity, timelineId, progress, stackPosition) {
      if (progress == null) {
        progress = 0;
      }
      if (stackPosition == null) {
        stackPosition = 0;
      }
      return _.assign({}, entity, {
        timelines: entity.timelines.splice(stackPosition, 0, timelineId),
        timelinesData: entity.timelinesData.set(timelineId, progress)
      });
    };

    Entity.removeTimeline = function(entity, timelineIdx) {
      var timelineId;
      timelineId = entity.timelines.get(timelineIdx);
      if (timelineId != null) {
        return _.assign({}, entity, {
          timelines: entity.timelines["delete"](timelineIdx),
          timelinesData: entity.timelinesData["delete"](timelineId)
        });
      } else {
        return entity;
      }
    };

    Entity.setTransform = function(entity, transform) {
      var newLocaldata;
      newLocaldata = _.assign(Entity.getLocalData(entity), {
        transform: transform
      });
      return Entity.setLocalData(entity, newLocaldata);
    };

    Entity.transform = function(entity, arg) {
      var rotate, scale, translate;
      translate = arg.translate, rotate = arg.rotate, scale = arg.scale;
      if (translate != null) {
        Entity.translate(entity, translate);
      }
      if (rotate != null) {
        Entity.rotate(entity, rotate);
      }
      if (scale != null) {
        return Entity.scale(entity, scale);
      }
    };

    Entity.translate = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.translate(Entity.getTransform(entity), amount)
      });
    };

    Entity.rotate = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.rotate(Entity.getTransform(entity), amount)
      });
    };

    Entity.scale = function(entity, amount) {
      return _.assign({}, entity, {
        transform: Transform.scale(Entity.getTransform(entity), amount)
      });
    };

    return Entity;

  })(Model);

  module.exports = Entity;

}).call(this);

//# sourceMappingURL=Entity.js.map
