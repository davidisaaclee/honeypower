// Generated by CoffeeScript 1.9.2
(function() {
  var Lens, Model, Transform, Vector2, _, ooChain, wrap,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Lens = require('Lens');

  Model = require('../Model');

  Vector2 = require('./Vector2');

  wrap = require('../../util/wrap');

  ooChain = require('../../util/ooChain');


  /*
  Describes a two-dimensional transform.
  
  Transform ::=
    position: Vector2
    rotation: Number
    scale: Vector2
   */

  Transform = (function(superClass) {
    extend(Transform, superClass);

    function Transform() {
      return Transform.__super__.constructor.apply(this, arguments);
    }

    Transform.make = function(position, rotation, scale) {
      if (position == null) {
        position = Vector2.zero;
      }
      if (rotation == null) {
        rotation = 0;
      }
      if (scale == null) {
        scale = Vector2.make(1, 1);
      }
      return _.assign(new Transform(), {
        position: position,
        rotation: rotation,
        scale: scale
      });
    };

    Transform["default"] = Object.freeze(Transform.make());

    Transform.withPosition = function(position) {
      return Transform.make(position);
    };

    Transform.withRotation = function(rotation) {
      return Transform.make(null, rotation, null);
    };

    Transform.withScale = function(scale) {
      return Transform.make(null, null, scale);
    };

    Transform.position = Lens.fromPath('position');

    Transform.rotation = Lens.fromPath('rotation');

    Transform.scale = Lens.fromPath('scale');

    Transform.applyTransform = function(transformA, transformB) {
      return ooChain(transformA).then(Transform.translateBy, Transform.position.get(transformB)).then(Transform.rotateBy, Transform.rotation.get(transformB)).then(Transform.scaleBy, Transform.scale.get(transformB)).value();
    };

    Transform.translateBy = function(transform, amount) {
      return Transform.position.over(transform, function(position) {
        return Vector2.add(position, amount);
      });
    };

    Transform.rotateBy = function(transform, amount) {
      return Transform.rotation.over(transform, function(rotation) {
        return wrap(0, 2 * Math.PI, rotation + amount);
      });
    };

    Transform.scaleBy = function(transform, amount) {
      return Transform.scale.over(transform, function(scale) {
        return Vector2.piecewiseMultiply(scale, amount);
      });
    };

    return Transform;

  })(Model);

  module.exports = Transform;

}).call(this);

//# sourceMappingURL=Transform.js.map
