// Generated by CoffeeScript 1.9.2
(function() {
  var Kit, Model, Set, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Model = require('./Model');

  Set = require('../util/Set');


  /*
  Represents a set of related entity prototypes, inspector views, and game
    mechanics.
  
  Kit ::=
    name: String
    prototypes: [String]
    physics: [String] # ?
    inspectors: [String] # ?
   */

  Kit = (function(superClass) {
    extend(Kit, superClass);

    function Kit() {
      return Kit.__super__.constructor.apply(this, arguments);
    }

    Kit.make = function(name, options) {
      options = _.defaults(options, {
        prototypes: Set.withHashProperty('name'),
        physics: Set.withHashProperty('name'),
        inspectors: Set.withHashProperty('name'),
        name: name
      });
      return _.assign(new Kit(), options);
    };

    Kit["with"] = function(name, prototypes, physics, inspectors) {
      if (prototypes == null) {
        prototypes = [];
      }
      if (physics == null) {
        physics = [];
      }
      if (inspectors == null) {
        inspectors = [];
      }
      return Kit.make(name, {
        prototypes: Set.withHashProperty('name', prototypes),
        physics: Set.withHashProperty('name', physics),
        inspectors: Set.withHashProperty('name', inspectors)
      });
    };

    Kit.getPrototypes = function(kit) {
      return kit.prototypes;
    };

    Kit.getPhysics = function(kit) {
      return kit.physics;
    };

    Kit.getInspectors = function(kit) {
      return kit.inspectors;
    };

    Kit.getPrototype = function(kit, prototypeName) {
      return Set.get(kit.prototypes, prototypeName);
    };

    Kit.getInspector = function(kit, inspectorId) {
      return Set.get(Kit.getInspectors, inspectorId);
    };

    return Kit;

  })(Model);

  module.exports = Kit;

}).call(this);

//# sourceMappingURL=Kit.js.map
