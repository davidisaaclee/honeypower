// Generated by CoffeeScript 1.9.2
(function() {
  var Kit, Lens, Model, Set, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Lens = require('lens');

  Model = require('./Model');

  Set = require('../util/Set');


  /*
  Represents a set of related entity prototypes, inspector views, and game
    mechanics.
  
  Kit ::=
    name: String
    prototypes: [String]
    physics: [String] # ?
    inspectors: [String] # ?
   */

  Kit = (function(superClass) {
    extend(Kit, superClass);

    function Kit() {
      return Kit.__super__.constructor.apply(this, arguments);
    }

    Kit.make = function(name, options) {
      options = _.defaults(options, {
        prototypes: Set.withHashProperty('name'),
        physics: Set.withHashProperty('name'),
        inspectors: Set.withHashProperty('name'),
        name: name
      });
      return _.assign(new Kit(), options);
    };

    Kit["with"] = function(name, prototypes, physics, inspectors) {
      if (prototypes == null) {
        prototypes = [];
      }
      if (physics == null) {
        physics = [];
      }
      if (inspectors == null) {
        inspectors = [];
      }
      return Kit.make(name, {
        prototypes: Set.withHashProperty('name', prototypes),
        physics: Set.withHashProperty('name', physics),
        inspectors: Set.withHashProperty('name', inspectors)
      });
    };

    Kit.allPrototypes = Lens.fromPath('prototypes');

    Kit.allPhysics = Lens.fromPath('physics');

    Kit.allInspectors = Lens.fromPath('inspectors');

    Kit.proto = (function() {
      var composed;
      composed = Lens.compose(Kit.allPrototypes, Set.element);
      return new Lens(function(kit, key) {
        return composed.get(kit, [], [key]);
      }, function(kit, key, val) {
        return composed.get(kit, [], [key], val);
      });
    })();

    Kit.inspector = (function() {
      var composed;
      composed = Lens.compose(Kit.allInspectors, Set.element);
      return new Lens(function(kit, inspectorId) {
        return composed.get(kit, [], [inspectorId]);
      }, function(kit, inspectorId, val) {
        return composed.set(kit, [], [inspectorId], val);
      });
    })();

    return Kit;

  })(Model);

  module.exports = Kit;

}).call(this);

//# sourceMappingURL=Kit.js.map
