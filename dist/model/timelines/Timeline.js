// Generated by CoffeeScript 1.9.2
(function() {
  var Timeline, _;

  _ = require('lodash');


  /*
  Abstraction for timelines for use with Darko timeline library.
  
  Timeline ::=
    id: String
    type: String
    data: Object
    [updateMethod: String]
   */

  Timeline = (function() {
    function Timeline() {}

    Timeline.UpdateMethod = {
      Time: 'Time'
    };

    Timeline.make = (function() {
      var spawnCount;
      spawnCount = 0;
      return function(type, data, id) {
        var config, fields;
        config = {
          id: id,
          type: type,
          data: data
        };
        fields = _.defaults(config, {
          id: "timeline-" + (spawnCount++)
        });
        return _.assign(new Timeline(), fields);
      };
    })();


    /*
    Modifies `data` according to the timeline's `progress`.
    
      timeline: Timeline - the invoking `PathTimeline`
      progress: Float - a number between 0 and 1, the progress of the timeline.
      data: Object - an arbitrary object used as the procedure's base value
      returns a modified copy of `data` - an Object
     */

    Timeline.mapping = function(timeline, progress, data) {
      console.warn('Timeline extension should override `mapping()`.');
      return data;
    };


    /*
    Returns this `Timeline`'s type as a string.
    
      timeline - the invoking `Timeline`.
     */

    Timeline.getType = function(timeline) {
      return timeline.type;
    };

    Timeline.setUpdateMethod = function(timeline, updateMethod) {
      return _.assign({}, timeline, {
        updateMethod: updateMethod
      });
    };

    return Timeline;

  })();

  module.exports = Timeline;

}).call(this);

//# sourceMappingURL=Timeline.js.map
