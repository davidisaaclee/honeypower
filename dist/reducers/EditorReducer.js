// Generated by CoffeeScript 1.9.2
(function() {
  var Editor, Entity, Scene, Set, Timeline, Transform, _, addChildReducers, defaultState, k, mapAssign, reducer, sceneReducer, updeep;

  _ = require('lodash');

  updeep = require('updeep');

  k = require('../ActionTypes');

  mapAssign = require('../util/mapAssign');

  addChildReducers = require('../util/addChildReducers');

  Scene = require('../model/Scene');

  Editor = require('../model/Editor');

  Timeline = require('../model/timelines/Timeline');

  Entity = require('../model/entities/Entity');

  Transform = require('../model/graphics/Transform');

  Set = require('../util/Set');

  sceneReducer = require('./SceneReducer');

  defaultState = Editor.empty;


  /*
  Reducer for all actions contained within entities.
   */

  reducer = function(state, action) {
    var child, entity, name, newScene, onto, parent, parentObj, proto, ref, ref1, ref2, stamp, timeline, transform;
    if (state == null) {
      state = defaultState;
    }
    switch (action.type) {
      case k.RemoveEntity:
        entity = action.data.entity;
        return _.assign({}, state, {
          scene: Scene.removeEntity(state.scene, entity)
        });
      case k.StampPrototype:
        ref = action.data, proto = ref.proto, onto = ref.onto, name = ref.name, transform = ref.transform;
        stamp = Editor.stampPrototype(state, proto);
        stamp = _.assign(stamp, {
          transform: transform,
          name: name
        });
        newScene = Scene.addEntity(state.scene, stamp);
        if (onto != null) {
          parentObj = Scene.getEntity(state.scene, onto);
          newScene = Scene.linkEntitiesById(newScene, parentObj.id, stamp.id);
        }
        return _.assign({}, state, {
          scene: newScene
        });
      case k.TransformEntity:
        ref1 = action.data, entity = ref1.entity, transform = ref1.transform;
        return _.assign({}, state, {
          scene: Scene.mutateEntity(state.scene, entity, function(e) {
            return _.assign({}, e, {
              transform: Transform.applyTransform(e.transform, transform)
            });
          })
        });
      case k.LinkEntities:
        ref2 = action.data, parent = ref2.parent, child = ref2.child;
        return _.assign({}, state, {
          scene: Scene.linkEntitiesById(state.scene, parent, child)
        });
      case k.RegisterTimeline:
        timeline = Timeline.make(action.data["class"], action.data.data);
        return _.assign({}, state, {
          scene: Scene.addTimeline(state.scene, timeline)
        });
      default:
        return state;
    }
  };

  module.exports = addChildReducers(reducer, {
    'scene': sceneReducer
  });

}).call(this);

//# sourceMappingURL=EditorReducer.js.map
