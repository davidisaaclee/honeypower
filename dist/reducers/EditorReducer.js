// Generated by CoffeeScript 1.9.2
(function() {
  var Editor, Entity, Scene, Set, Timeline, Transform, _, addChildReducers, defaultState, k, mapAssign, reducer, sceneReducer, updeep;

  _ = require('lodash');

  updeep = require('updeep');

  k = require('../ActionTypes');

  mapAssign = require('../util/mapAssign');

  addChildReducers = require('../util/addChildReducers');

  Scene = require('../model/Scene');

  Editor = require('../model/Editor');

  Timeline = require('../model/timelines/Timeline');

  Entity = require('../model/entities/Entity');

  Transform = require('../model/graphics/Transform');

  Set = require('../util/Set');

  sceneReducer = require('./SceneReducer');

  defaultState = Editor.empty;


  /*
  Reducer for all actions contained within entities.
   */

  reducer = function(state, action) {
    var child, data, entity, id, name, onto, parent, progress, proto, ref, ref1, ref2, ref3, ref4, ref5, stackPosition, timeline, timelineIndex, transform, type;
    if (state == null) {
      state = defaultState;
    }
    switch (action.type) {
      case k.RemoveEntity:
        entity = action.data.entity;
        return Editor.mutateScene(state, function(scene) {
          return Scene.removeEntity(scene, entity);
        });
      case k.StampPrototype:
        ref = action.data, id = ref.id, proto = ref.proto, onto = ref.onto, name = ref.name, transform = ref.transform;
        return Editor.mutateScene(state, function(scene) {
          var newScene, parentObj, stamp;
          stamp = Editor.stampPrototype(state, proto, transform, name, id);
          newScene = Scene.addEntity(scene, stamp);
          if (onto != null) {
            parentObj = Scene.getEntity(scene, onto);
            newScene = Scene.linkEntitiesById(newScene, parentObj.id, stamp.id);
          }
          return newScene;
        });
      case k.TransformEntity:
        ref1 = action.data, entity = ref1.entity, transform = ref1.transform;
        return Editor.mutateScene(state, function(scene) {
          return Scene.mutateEntity(scene, entity, function(e) {
            return Scene.Entities.mutateLocalData(scene, e, function(data) {
              return _.assign({}, data, {
                transform: Transform.applyTransform(data.transform, transform)
              });
            });
          });
        });
      case k.LinkEntities:
        ref2 = action.data, parent = ref2.parent, child = ref2.child;
        return Editor.mutateScene(state, function(scene) {
          return Scene.linkEntitiesById(scene, parent, child);
        });
      case k.RegisterTimeline:
        ref3 = action.data, id = ref3.id, type = ref3.type, data = ref3.data;
        timeline = Timeline.make(type, data, id);
        return Editor.mutateScene(state, function(scene) {
          return Scene.addTimeline(scene, timeline);
        });
      case k.AttachTimeline:
        ref4 = _.defaults(action.data, {
          progress: 0,
          stackPosition: 0
        }), timeline = ref4.timeline, entity = ref4.entity, progress = ref4.progress, stackPosition = ref4.stackPosition;
        return Editor.mutateScene(state, function(scene) {
          return Scene.attachEntityToTimeline(scene, entity, timeline, progress, stackPosition);
        });
      case k.DetachTimeline:
        ref5 = action.data, timelineIndex = ref5.timelineIndex, entity = ref5.entity;
        return Editor.mutateScene(state, function(scene) {
          return Scene.detachEntityFromTimelineAtIndex(scene, entity, timelineIndex);
        });
      default:
        return state;
    }
  };

  module.exports = addChildReducers(reducer, {
    'scene': sceneReducer
  });

}).call(this);

//# sourceMappingURL=EditorReducer.js.map
